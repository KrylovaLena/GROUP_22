{
	"info": {
		"_postman_id": "d9f92360-20f1-4fe2-911a-9d898f57bac4",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function (){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"console.log (\"jsonData\", jsonData);",
							"",
							"//Проверить, что name в ответе равно name c request (name вбить руками.)",
							"let name_res = jsonData.name",
							"console.log (\"name_res\", name_res);",
							"pm.test(\"name valid\", function(){",
							"pm.expect(name_res).to.eql('Lena');",
							"});",
							"",
							"// Проверить, что age в ответе равно age c request (age вбить руками.)",
							"let age_res = jsonData.age",
							"console.log (\"age_res\", age_res);",
							"pm.test (\"age valid\", function(){",
							"    pm.expect(age_res).to.eql('33');",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary c request (salary вбить руками.)",
							"let salary_res = jsonData.salary",
							"console.log (\"salary_res\", salary_res);",
							"pm.test (\"salary valid\", function(){",
							"    pm.expect(salary_res).to.eql (700);",
							"});",
							"",
							"// Спарсить request.",
							"let reqPars = request.data;",
							"console.log(\"reqPars\", reqPars);",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let nameReq = reqPars.name;",
							"console.log (\"nameReq\", nameReq);",
							"pm.test(\"name valid request\", function(){",
							"pm.expect(name_res).to.eql(nameReq);",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let ageReq=reqPars.age;",
							"console.log(\"ageReq\", ageReq);",
							"pm.test (\"age valid request\", function(){",
							"pm.expect(age_res).to.eql(ageReq);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let salaryReq=+reqPars.salary;",
							"console.log (\"salaryReq\", salaryReq);",
							"pm.test(\"salary valid request\", function(){",
							"pm.expect(salary_res).to.eql(salaryReq);",
							"});",
							"",
							"// Вывести в консоль параметр family из response.",
							"let family=jsonData.family;",
							"console.log(\"family\",family);",
							"",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let u_salary_1_5_year=+jsonData.family.u_salary_1_5_year;",
							"console.log(\"u_salary_1_5_year\", u_salary_1_5_year);",
							"pm.test(\"u_salary_1_5_year=salary*4\", function(){",
							"pm.expect(u_salary_1_5_year).to.eql(salaryReq*4);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"status code 200\", function(){",
							"pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let jsonData=pm.response.json();",
							"console.log(\"jsonData\", jsonData);",
							"",
							"// Спарсить request.",
							"let reqPars = pm.request.url.query.all();",
							"console.log (\"reqPars\",reqPars);",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let nameRes = jsonData.name;",
							"console.log(\"nameRes\", nameRes);",
							"let nameReq=reqPars[0].value;",
							"console.log(\"nameReq\",nameReq);",
							"pm.test(\"name в ответе равно name c request\", function(){",
							"pm.expect(nameRes).to.eql(nameReq);",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let ageRes=jsonData.age;",
							"console.log(\"ageRes\", ageRes);",
							"let ageReq=reqPars[1].value;",
							"console.log(\"ageReq\", ageReq);",
							"pm.test(\"age в ответе равно age c request\", function(){",
							"pm.expect(ageRes).to.eql(ageReq);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"let salaryRes=jsonData.salary;",
							"console.log(\"salaryRes\", salaryRes);",
							"let salaryReq=+reqPars[2].value;",
							"console.log(\"salaryReq\",salaryReq);",
							"pm.test(\"salary в ответе равно salary c request\",function(){",
							"pm.expect(salaryRes).to.eql(salaryReq);",
							"});",
							"",
							"// Вывести в консоль параметр family из response.",
							"let family=jsonData.family;",
							"console.log(\"family\",family);",
							"",
							"// Проверить, что у параметра dog есть параметры name.",
							"let dog=jsonData.family.pets.dog;",
							"console.log(dog);",
							"",
							"pm.test(\"dog parameter has name parameters\", function(){",
							"pm.expect(dog).to.have.property(\"name\");",
							"});",
							"",
							"// Проверить, что у параметра dog есть параметры age.",
							"",
							"pm.test(\"dog parameter has age parameters\", function(){",
							"pm.expect(dog).to.have.property(\"age\");",
							"});",
							"",
							"// Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"name имеет значение Luky\", function(){",
							"pm.expect(dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"// Проверить, что параметр age имеет значение 4.",
							"pm.test(\"age имеет значение 4\", function(){",
							"pm.expect(dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Lena&age=33&salary=700&token={{token}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "700"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"status code 200\", function(){",
							"pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"console.log(\"jsonData\", jsonData);",
							"",
							"// Спарсить request.",
							"let reqPars = pm.request.url.query.all();",
							"console.log (\"reqPars\",reqPars);",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let nameRes=jsonData.name;",
							"console.log(\"nameRes\", nameRes);",
							"let nameReq=reqPars[0].value;",
							"console.log(\"nameReq\", nameReq);",
							"pm.test(\"name в ответе равно name s request\", function(){",
							"pm.expect(nameRes).to.eql(nameReq);",
							"});",
							"",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)",
							"let ageRes=jsonData.age;",
							"console.log(\"ageRes\", ageRes);",
							"let ageReq=+reqPars[1].value;",
							"console.log(\"ageReq\", ageReq);",
							"pm.test(\"age в ответе равно age из request\",function(){",
							"pm.expect(ageRes).to.eql(ageReq);",
							"});",
							"",
							"// Вывести в консоль параметр salary из request.",
							"let salaryReq=reqPars[2].value;",
							"console.log(\"salaryReq\", salaryReq);",
							"",
							"",
							"// Вывести в консоль параметр salary из response.",
							"let salaryRes=jsonData.salary;",
							"console.log(\"salaryRes\", salaryRes);",
							"",
							"// Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(\"salary[0]\", salaryRes[0]);",
							"",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(\"salary[1]\", salaryRes[1]);",
							"",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(\"salary[2]\", salaryRes[2]);",
							"",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"salary[0] равен salary из request\", function(){",
							"pm.expect(salaryRes[0]).to.eql(+reqPars[2].value);",
							"});",
							"",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"salary[1] равен salary*2 из request\", function(){",
							"pm.expect(+salaryRes[1]).to.eql(reqPars[2].value*2);",
							"});",
							"console.log(\"salaryRes[1]\", salaryRes[1]);",
							"console.log(\"reqPars[2].value*2\", reqPars[2].value*2);",
							"",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"salary[2] равен salary*3 из request\", function(){",
							"pm.expect(+salaryRes[2]).to.eql(reqPars[2].value*3);",
							"});",
							"console.log(\"salaryRes[1]\", salaryRes[2]);",
							"console.log(\"reqPars[2].value*2\", reqPars[2].value*3);",
							"",
							"// Создать в окружении переменную name",
							"pm.environment.set(\"name\", nameReq);",
							"// Создать в окружении переменную age",
							"pm.environment.set(\"age\", ageReq);",
							"",
							"// Создать в окружении переменную salary",
							"pm.environment.set(\"salary\", salaryReq);",
							"",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (i=0; i<salaryRes.length; i++)",
							"{console.log(\"salary \"+salaryRes[i]);}",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.(2 вариант)",
							"salaryRes.forEach ( element=>console.log(\"salary \"+element))",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.(3 вариант)",
							"",
							"function myFunction (item, index){",
							"    console.log (index+\" salary:\"+item);",
							"}",
							"salaryRes.forEach(myFunction);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Lena&age=33&salary=700&token={{token}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "700"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code 200\", function(){",
							"pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let jsonData=pm.response.json();",
							"console.log(\"jsonData\", jsonData);",
							"",
							"// Спарсить request.",
							"let reqPars=request.data;",
							"console.log(\"reqPars\", reqPars);",
							"",
							"",
							"// Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"response имеет параметр start_qa_salary\",function(){",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"response имеет параметр qa_salary_after_6_months\", function(){",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"response имеет параметр qa_salary_after_12_months\", function(){",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"response имеет параметр qa_salary_after_1.5_year\",function(){",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"response имеет параметр qa_salary_after_3.5_years\", function(){",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// Проверить, что json response имеет параметр person",
							"pm.test(\"response имеет параметр person\", function(){",
							"pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"console.log(\"start_qa_salary\", jsonData.start_qa_salary);",
							"console.log(\"salary\", +reqPars.salary);",
							"pm.test(\"параметр start_qa_salary равен salary из request\", function(){",
							"pm.expect(jsonData.start_qa_salary).to.eql(+reqPars.salary);",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"console.log(\"qa_salary_after_6_months\",jsonData.qa_salary_after_6_months);",
							"console.log(\"salary*2\", reqPars.salary*2);",
							"pm.test(\"qa_salary_after_6_months равен salary*2 из request\",function(){",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqPars.salary*2);",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"console.log(\"qa_salary_after_12_months\", jsonData.qa_salary_after_12_months);",
							"console.log(\"salary*2.7\",reqPars.salary*2.7);",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request\", function(){",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqPars.salary*2.7);",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"// let salaryRes= jsonData[\"qa_salary_after_1.5_year\"]",
							"// console.log(\"salaryRes\", salaryRes);",
							"console.log(\"qa_salary_after_1.5_year\",jsonData[\"qa_salary_after_1.5_year\"]);",
							"console.log(\"salary*3.3\", reqPars.salary*3.3);",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3\", function(){",
							"pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(reqPars.salary*3.3);",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"console.log(\"qa_salary_after_3.5_years\",jsonData[\"qa_salary_after_3.5_years\"]);",
							"console.log(\"salary*3.8\", reqPars.salary*3.8);",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function(){",
							"pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(reqPars.salary*3.8);",
							"});",
							"",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"console.log(\"salary in u_name\", jsonData.person.u_name[1]);",
							"console.log(\"salary in request\", +reqPars.salary);",
							"pm.test(\"1-й элемент из u_name равен salary из request\", function(){",
							"pm.expect(jsonData.person.u_name[1]).to.eql(+reqPars.salary);    ",
							"});",
							"",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"console.log(\"u_age\", jsonData.person.u_age);",
							"console.log(\"age in request\", +reqPars.age);",
							"pm.test(\"u_age равен age из request\", function(){",
							"pm.expect(jsonData.person.u_age).to.eql(+reqPars.age);",
							"});",
							"",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"",
							"console.log(\"u_salary_5_years\", jsonData.person.u_salary_5_years);",
							"console.log(\"salary*4.2\", reqPars.salary*4.2);",
							"pm.test(\"u_salary_5_years равен salary*4.2 из request\", function(){",
							"pm.expect(jsonData.person.u_salary_5_years).to.eql(reqPars.salary*4.2);",
							"});",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"Object.keys(jsonData.person).forEach( element=>console.log(\"person: \"+element))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Проверить, что в body приходит правильный string.",
							"pm.test(\"в body приходит правильный string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}